{"ast":null,"code":"var _jsxFileName = \"/Users/phong/Documents/Git/CODE/Trivia Questionnaire/src/Components/Questions.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questions() {\n  _s();\n\n  // const [allQuestions, setAllQuestions] = React.useState([])\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5\").then(res => res.json()).then(data => setAllQuestions(data.results));\n  }, []); // function handleChange(event) {\n  //     const {name, value} = event.target\n  //     setMeme(prevMeme => ({\n  //         ...prevMeme,\n  //         [name]: value\n  //     }))\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Questions, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"sources":["/Users/phong/Documents/Git/CODE/Trivia Questionnaire/src/Components/Questions.js"],"names":["React","Questions","useEffect","fetch","then","res","json","data","setAllQuestions","results"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAChC;AAGAD,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AAClBC,IAAAA,KAAK,CAAC,sCAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IAAIC,eAAe,CAACD,IAAI,CAACE,OAAN,CAFjC;AAGH,GAJD,EAIG,EAJH,EAJgC,CAYhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAzBuBR,S;;KAAAA,S","sourcesContent":["import React from \"react\"\n\nexport default function Questions() {\n    // const [allQuestions, setAllQuestions] = React.useState([])\n    \n    \n    React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5\")\n            .then(res => res.json())\n            .then(data => setAllQuestions(data.results))\n    }, [])\n    \n\n    \n    // function handleChange(event) {\n    //     const {name, value} = event.target\n    //     setMeme(prevMeme => ({\n    //         ...prevMeme,\n    //         [name]: value\n    //     }))\n    // }\n    \n    return (\n        <main>\n\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}