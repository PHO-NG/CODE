{"ast":null,"code":"var _jsxFileName = \"/Users/phong/Documents/REACT/Tenzies/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Title from \"./Components/Title\";\nimport Die from \"./Components/Die\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [dice, setDice] = React.useState(diceRoll());\n  const [tenzies, setTenzies] = React.useState(false);\n  const [rolls, setRolls] = React.useState(0);\n  /*---CHECK IF WINNING CONDITIONS ARE MET---*/\n\n  React.useEffect(() => {\n    const allHeld = dice.every(die => die.isHeld);\n    const firstValue = dice[0].value;\n    const allSameValue = dice.every(die => die.value === firstValue);\n\n    if (allHeld && allSameValue) {\n      setTenzies(true);\n    }\n  }, [dice]);\n  /*---INITIAL DICEROLL---*/\n\n  function diceRoll() {\n    const diceArr = [];\n\n    for (let i = 0; i < 10; i++) {\n      diceArr.push({\n        value: Math.floor(Math.random() * 6) + 1,\n        isHeld: false,\n        id: nanoid()\n      });\n    }\n\n    return diceArr;\n  }\n  /*---ROLLS ONLY THOSE THAT ARENT HELD---*/\n\n\n  function roll() {\n    let tempAr = dice.map(die => die.isHeld ? die : { ...die,\n      value: Math.floor(Math.random() * 6) + 1\n    });\n    setRolls(prev + 1);\n    /*---UNLESS RESTARTED GAME----*/\n\n    if (tenzies) {\n      tempAr = diceRoll();\n      setRolls(1);\n    }\n\n    setDice(tempAr);\n    setTenzies(false);\n  }\n  /*---HOLD A SPECIFIC DIE---*/\n\n\n  function toggleHold(dieId) {\n    const tempAr = dice.map(die => die.id === dieId ? { ...die,\n      isHeld: !die.isHeld\n    } : die);\n    setDice(tempAr);\n  }\n\n  const diceBoard = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die.value,\n    isHeld: die.isHeld,\n    toggleHold: () => toggleHold(die.id)\n  }, die.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: diceBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: roll,\n      children: [tenzies ? \"Play Again\" : \"Roll\", \" \", rolls]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FBtyGIdGVD63Fx1LiWGiybEJBdg=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/phong/Documents/REACT/Tenzies/src/App.js"],"names":["React","nanoid","Title","Die","App","dice","setDice","useState","diceRoll","tenzies","setTenzies","rolls","setRolls","useEffect","allHeld","every","die","isHeld","firstValue","value","allSameValue","diceArr","i","push","Math","floor","random","id","roll","tempAr","map","prev","toggleHold","dieId","diceBoard"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {nanoid} from \"nanoid\"\nimport Title from \"./Components/Title\"\nimport Die from \"./Components/Die\"\n\n\nexport default function App() {\n  const [dice, setDice] = React.useState(diceRoll())\n\n  const [tenzies, setTenzies] = React.useState(false)\n\n  const [rolls, setRolls] = React.useState(0);\n\n  /*---CHECK IF WINNING CONDITIONS ARE MET---*/\n  React.useEffect(() => {\n    const allHeld = dice.every(die => die.isHeld)\n    const firstValue = dice[0].value\n    const allSameValue = dice.every(die => die.value === firstValue)\n    if (allHeld && allSameValue) {\n        setTenzies(true)\n    }\n  }, [dice])\n\n  /*---INITIAL DICEROLL---*/\n  function diceRoll() {\n    const diceArr = []\n    for (let i = 0; i < 10; i++) {\n      diceArr.push({\n        value: Math.floor(Math.random() * 6 ) + 1,\n        isHeld: false,\n        id: nanoid()\n      })\n    }\n    return diceArr\n  }\n\n  /*---ROLLS ONLY THOSE THAT ARENT HELD---*/\n  function roll() {\n    let tempAr = dice.map(die => die.isHeld ? die : {...die, value: Math.floor(Math.random() * 6 ) + 1})\n    setRolls(prev + 1)\n    /*---UNLESS RESTARTED GAME----*/\n    if (tenzies) {\n      tempAr = diceRoll()\n      setRolls(1)\n    }\n    setDice(tempAr)\n    setTenzies(false)\n  }\n\n  /*---HOLD A SPECIFIC DIE---*/\n  function toggleHold(dieId) {\n    const tempAr = dice.map(die => die.id === dieId ? {...die, isHeld: !die.isHeld} : die)\n    setDice(tempAr)\n  }\n\n  const diceBoard = dice.map(die => (\n    <Die\n      key={die.id}\n      value={die.value}\n      isHeld = {die.isHeld}\n      toggleHold = {() => toggleHold(die.id)}\n    />\n  ))\n\n\n\n  return (\n    <main>\n      <Title />\n      <div className=\"game-container\">\n        {diceBoard}\n      </div>\n      <button onClick={roll}>{tenzies ? \"Play Again\" : \"Roll\"} {rolls}</button>\n    </main>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}